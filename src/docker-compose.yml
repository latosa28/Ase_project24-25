version: '3.8'

services:
  # Microservice for collections
  collection:
    build: ./collection
    container_name: collection
    expose:
      - "5002"  # Exposed only within the Docker network
    networks:
      - app-network
    environment:
      - FLASK_ENV=development
      - DB_HOST=collection_db
      - DB_PORT=3306
      - DB_NAME=${DB_COLLECTION_NAME}  # Database name from .env
      - DB_USER=${DB_COLLECTION_USER}  # Database user from .env
      - DB_PASSWORD=${DB_COLLECTION_PASSWORD}  # Database password from .env
    depends_on:
      - collection_db  # Ensure the database starts before the service

  # Microservice for accounts
  account:
    build: ./account
    container_name: account
    expose:
      - "5003"  # Exposed only within the Docker network
    networks:
      - app-network
    environment:
      - FLASK_ENV=development
      - DB_HOST=account_db
      - DB_PORT=3306
      - DB_NAME=${DB_ACCOUNT_NAME}  # Database name from .env
      - DB_USER=${DB_ACCOUNT_USER}  # Database user from .env
      - DB_PASSWORD=${DB_ACCOUNT_PASSWORD}  # Database password from .env
    depends_on:
      - account_db  # Ensure the database starts before the service

  # Microservice for the market
  market:
    build: ./market
    container_name: market
    expose:
      - "5004"  # Exposed only within the Docker network
    networks:
      - app-network
    environment:
      - FLASK_ENV=development
      - DB_HOST=market_db
      - DB_PORT=3306
      - DB_NAME=${DB_MARKET_NAME}  # Database name from .env
      - DB_USER=${DB_MARKET_USER}  # Database user from .env
      - DB_PASSWORD=${DB_MARKET_PASSWORD}  # Database password from .env
    depends_on:
      - market_db  # Ensure the database starts before the service

  # Microservice for currency (not accessible from the API Gateway)
  currency:
    build: ./currency
    container_name: currency
    expose:
      - "5005"  # Exposed only within the Docker network
    networks:
      - app-network
    environment:
      - FLASK_ENV=development
      - DB_HOST=currency_db
      - DB_PORT=3306
      - DB_NAME=${DB_CURRENCY_NAME}  # Database name from .env
      - DB_USER=${DB_CURRENCY_USER}  # Database user from .env
      - DB_PASSWORD=${DB_CURRENCY_PASSWORD}  # Database password from .env
    depends_on:
      - currency_db  # Ensure the database starts before the service

  # Public API Gateway (accessible externally)
  api_gateway:
    build: ./api_gateway
    container_name: api_gateway
    ports:
      - "5001:5000"  # Exposed port for public client
    networks:
      - app-network
      - public-network  # Connected to the public network
    environment:
      - FLASK_ENV=development
    depends_on:
      - account
      - collection
      - market
      - currency

  # Admin service (accessible only from the private network and through api_gateway_admin)
  admin_account:
    build: ./admin_account
    container_name: admin_account
    expose:
      - "5006"  # Exposed only within the Docker network
    networks:
      - app-network
    environment:
      - FLASK_ENV=development
      - DB_HOST=admin_db
      - DB_PORT=3306
      - DB_NAME=${DB_ADMIN_NAME}  # Database name from .env
      - DB_USER=${DB_ADMIN_USER}  # Database user from .env
      - DB_PASSWORD=${DB_ADMIN_PASSWORD}  # Database password from .env
    depends_on:
      - admin_db  # Ensure the database starts before the service

  # Admin API Gateway (accessible only from the private network)
  admin_api_gateway:
    build: ./admin_api_gateway
    container_name: admin_api_gateway
    ports:
      - "5010:5010"  
    networks:
      - app-network  # Accessible only from the private network
      - admin-network  # Private network for admin services
    environment:
      - FLASK_ENV=development
    depends_on:
      - account
      - collection
      - admin_account
      - market

  # MySQL for the collection microservice
  collection_db:
    image: mysql:8
    container_name: collection_db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}  # Root password from .env
      - MYSQL_DATABASE=${DB_COLLECTION_NAME}  # Database name from .env
      - MYSQL_USER=${DB_COLLECTION_USER}  # User for this service from .env
      - MYSQL_PASSWORD=${DB_COLLECTION_PASSWORD}  # Password for this user from .env
    volumes:
      - collection_db_data:/var/lib/mysql
      - ./collection/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./collection/db/images:/collection_db/items_images
    networks:
      - app-network

  # MySQL for the account microservice
  account_db:
    image: mysql:8
    container_name: account_db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}  # Root password from .env
      - MYSQL_DATABASE=${DB_ACCOUNT_NAME}  # Database name from .env
      - MYSQL_USER=${DB_ACCOUNT_USER}  # User for this service from .env
      - MYSQL_PASSWORD=${DB_ACCOUNT_PASSWORD}  # Password for this user from .env
    volumes:
      - account_db_data:/var/lib/mysql
      - ./account/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # MySQL for the market microservice
  market_db:
    image: mysql:8
    container_name: market_db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}  # Root password from .env
      - MYSQL_DATABASE=${DB_MARKET_NAME}  # Database name from .env
      - MYSQL_USER=${DB_MARKET_USER}  # User for this service from .env
      - MYSQL_PASSWORD=${DB_MARKET_PASSWORD}  # Password for this user from .env
    volumes:
      - market_db_data:/var/lib/mysql
      - ./market/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # MySQL for the currency microservice
  currency_db:
    image: mysql:8
    container_name: currency_db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}  # Root password from .env
      - MYSQL_DATABASE=${DB_CURRENCY_NAME}  # Database name from .env
      - MYSQL_USER=${DB_CURRENCY_USER}  # User for this service from .env
      - MYSQL_PASSWORD=${DB_CURRENCY_PASSWORD}  # Password for this user from .env
    volumes:
      - currency_db_data:/var/lib/mysql
      - ./currency/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # MySQL for the admin microservice
  admin_db:
    image: mysql:8
    container_name: admin_db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}  # Root password from .env
      - MYSQL_DATABASE=${DB_ADMIN_NAME}  # Database name from .env
      - MYSQL_USER=${DB_ADMIN_USER}  # User for this service from .env
      - MYSQL_PASSWORD=${DB_ADMIN_PASSWORD}  # Password for this user from .env
    volumes:
      - admin_db_data:/var/lib/mysql
      - ./admin_account/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge  # Network for microservices
  public-network:
    driver: bridge  # Network for services exposed to the public
  admin-network:
    driver: bridge  # Private network for admin services

volumes:
  collection_db_data:
  account_db_data:
  market_db_data:
  currency_db_data:
  admin_db_data:
