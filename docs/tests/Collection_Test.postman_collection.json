{
	"info": {
		"_postman_id": "5ea75756-f556-4232-b8d9-201390312c11",
		"name": "Collection_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39564474"
	},
	"item": [
		{
			"name": "collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('item_id');\r",
							"        pm.expect(item).to.have.property('rarity');\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(item).to.have.property('image_path');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5002/user/1/collection"
			},
			"response": []
		},
		{
			"name": "item_system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Item should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('item_id');\r",
							"    pm.expect(jsonData).to.have.property('rarity');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('image_path')\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5002/user/1/item/1"
			},
			"response": []
		},
		{
			"name": "item_system item not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Item in the system collection not found \", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"     pm.expect(jsonData).to.have.property(\"error\", \"not_found\");\r",
							"    pm.expect(jsonData).to.have.property('error_description', 'Item not found');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5002/user/1/item/25"
			},
			"response": []
		},
		{
			"name": "roll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain new item instance details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('item_id');\r",
							"    pm.expect(jsonData).to.have.property('instance_id');\r",
							"    pm.expect(jsonData).to.have.property('image_path');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('rarity');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": "http://localhost:5002/user/1/roll"
			},
			"response": []
		},
		{
			"name": "roll user!=1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Service Unavailable\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\", \"service_unavailable\");\r",
							"    pm.expect(jsonData).to.have.property('error_description', 'Service Unavailable');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": "http://localhost:5002/user/2/roll"
			},
			"response": []
		},
		{
			"name": "item_collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Item instance should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('date_roll')\r",
							"    pm.expect(jsonData).to.have.property('item_id');\r",
							"    pm.expect(jsonData).to.have.property('instance_id');\r",
							"    pm.expect(jsonData).to.have.property('image_path');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('rarity');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5002/user/1/instance/1"
			},
			"response": []
		},
		{
			"name": "item_collection item not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Item instance should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"     pm.expect(jsonData).to.have.property(\"error\", \"not_found\");\r",
							"    pm.expect(jsonData).to.have.property('error_description', 'Item instance not found')\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5002/user/1/instance/2"
			},
			"response": []
		}
	]
}