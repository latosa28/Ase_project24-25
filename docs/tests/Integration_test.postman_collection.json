{
	"info": {
		"_postman_id": "2dbf0603-6524-4310-8d43-a0c17b5ce75a",
		"name": "Integration_test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39564474"
	},
	"item": [
		{
			"name": "Account",
			"item": [
				{
					"name": "create_user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Status Code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser1\",\r\n  \"email\": \"testuser1@example.com\",\r\n  \"password\": \"TestPassword123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user"
					},
					"response": []
				},
				{
					"name": "create_user2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Status Code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser2\",\r\n  \"email\": \"testuser2@example.com\",\r\n  \"password\": \"TestPassword1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user"
					},
					"response": []
				},
				{
					"name": "create_user3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Status Code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser3\",\r\n  \"email\": \"testuser3@example.com\",\r\n  \"password\": \"TestPassword12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user"
					},
					"response": []
				},
				{
					"name": "login1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo status code sia 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che la risposta contenga il 'token'\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"    \r",
									"    // Salva il token come variabile d'ambiente\r",
									"    if (responseJson.token) {\r",
									"        pm.collectionVariables.set(\"jwt_token1\", responseJson.token);\r",
									"        console.log(\"JWT Token saved: \" + responseJson.token)\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testuser1\",\r\n    \"password\": \"TestPassword123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/auth"
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/auth"
					},
					"response": []
				},
				{
					"name": "login1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo status code sia 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che la risposta contenga il 'token'\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"    \r",
									"    // Salva il token come variabile d'ambiente\r",
									"    if (responseJson.token) {\r",
									"        pm.collectionVariables.set(\"jwt_token1\", responseJson.token);\r",
									"        console.log(\"JWT Token saved: \" + responseJson.token)\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testuser1\",\r\n    \"password\": \"TestPassword123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/auth"
					},
					"response": []
				},
				{
					"name": "delete_user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Delete User - Correct Message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Account deleted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user"
					},
					"response": []
				},
				{
					"name": "create_user1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Status Code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser1\",\r\n  \"email\": \"testuser1@example.com\",\r\n  \"password\": \"TestPassword123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "login1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo status code sia 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che la risposta contenga il 'token'\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"    \r",
									"    // Salva il token come variabile d'ambiente\r",
									"    if (responseJson.token) {\r",
									"        pm.collectionVariables.set(\"jwt_token1\", responseJson.token);\r",
									"        console.log(\"JWT Token saved: \" + responseJson.token)\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testuser1\",\r\n    \"password\": \"TestPassword123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/auth"
					},
					"response": []
				},
				{
					"name": "login2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo status code sia 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che la risposta contenga il 'token'\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"    \r",
									"    // Salva il token come variabile d'ambiente\r",
									"    if (responseJson.token) {\r",
									"        pm.collectionVariables.set(\"jwt_token2\", responseJson.token);\r",
									"        console.log(\"JWT Token saved: \" + responseJson.token)\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testuser2\",\r\n    \"password\": \"TestPassword1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/auth"
					},
					"response": []
				},
				{
					"name": "login3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo status code sia 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che la risposta contenga il 'token'\r",
									"pm.test(\"Response contains token\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('token');\r",
									"    \r",
									"    // Salva il token come variabile d'ambiente\r",
									"    if (responseJson.token) {\r",
									"        pm.collectionVariables.set(\"jwt_token3\", responseJson.token);\r",
									"        console.log(\"JWT Token saved: \" + responseJson.token)\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testuser3\",\r\n    \"password\": \"TestPassword12345\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/auth"
					},
					"response": []
				}
			]
		},
		{
			"name": "Collection",
			"item": [
				{
					"name": "collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property('item_id');\r",
									"        pm.expect(item).to.have.property('rarity');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('image_path');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/collection"
					},
					"response": []
				},
				{
					"name": "item_system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('item_id');\r",
									"    pm.expect(jsonData).to.have.property('rarity');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('image_path')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/item/1"
					},
					"response": []
				},
				{
					"name": "user_collection1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an empty object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/1/collection"
					},
					"response": []
				},
				{
					"name": "user_collection2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an empty object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/2/collection"
					},
					"response": []
				},
				{
					"name": "user_collection3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be an empty object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/3/collection"
					},
					"response": []
				},
				{
					"name": "roll1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain new item instance details\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('item_id');\r",
									"    pm.expect(jsonData).to.have.property('instance_id');\r",
									"    pm.expect(jsonData).to.have.property('image_path');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('rarity');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/roll"
					},
					"response": []
				},
				{
					"name": "roll2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain new item instance details\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('item_id');\r",
									"    pm.expect(jsonData).to.have.property('instance_id');\r",
									"    pm.expect(jsonData).to.have.property('image_path');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('rarity');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/roll"
					},
					"response": []
				},
				{
					"name": "roll3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain new item instance details\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('item_id');\r",
									"    pm.expect(jsonData).to.have.property('instance_id');\r",
									"    pm.expect(jsonData).to.have.property('image_path');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('rarity');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/roll"
					},
					"response": []
				},
				{
					"name": "user_collection1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User collection should be an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(2); \r",
									"});\r",
									"\r",
									"pm.test(\"Each user item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"    pm.expect(item).to.have.property('item_id');\r",
									"    pm.expect(item).to.have.property('instance_id');\r",
									"    pm.expect(item).to.have.property('image_path');\r",
									"    pm.expect(item).to.have.property('name');\r",
									"    pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/4/collection"
					},
					"response": []
				},
				{
					"name": "user_collection2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User collection should be an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"});\r",
									"\r",
									"pm.test(\"Each user item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"    pm.expect(item).to.have.property('item_id');\r",
									"    pm.expect(item).to.have.property('instance_id');\r",
									"    pm.expect(item).to.have.property('image_path');\r",
									"    pm.expect(item).to.have.property('name');\r",
									"    pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/2/collection"
					},
					"response": []
				},
				{
					"name": "item_collection1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Item instance should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('date_roll')\r",
									"    pm.expect(jsonData).to.have.property('item_id');\r",
									"    pm.expect(jsonData).to.have.property('instance_id');\r",
									"    pm.expect(jsonData).to.have.property('image_path');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('rarity');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/4/instance/1"
					},
					"response": []
				},
				{
					"name": "item_collection2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Item instance should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('date_roll')\r",
									"    pm.expect(jsonData).to.have.property('item_id');\r",
									"    pm.expect(jsonData).to.have.property('instance_id');\r",
									"    pm.expect(jsonData).to.have.property('image_path');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('rarity');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/2/instance/3"
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful payment\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains message and currency_received\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message', 'Payment successful');\r",
									"    pm.expect(jsonData).to.have.property('currency_received');\r",
									"    pm.expect(jsonData.currency_received).to.eql(50);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"card_number\": \"4111111111111111\",\r\n    \"card_expiry\": \"12/26\",\r\n    \"card_cvc\": \"123\",\r\n    \"amount\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/payment"
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency",
			"item": [
				{
					"name": "get_amount1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(510);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "get_amount2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(480);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "get_amount3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.environment.set(\"old_balance\", jsonData.amount);\r",
									"    pm.expect(jsonData.amount).to.eql(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				}
			]
		},
		{
			"name": "Market",
			"item": [
				{
					"name": "market_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che la lista delle aste sia un array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(0); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/market_list"
					},
					"response": []
				},
				{
					"name": "transaction_history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che la lista delle transazioni sia un array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(0); \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/transactions_history"
					},
					"response": []
				},
				{
					"name": "auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che l'asta sia stata creata con successo\", function () {\r",
									"    pm.expect(jsonData).to.have.property('istance_id');\r",
									"    pm.expect(jsonData).to.have.property('start_date');\r",
									"    pm.expect(jsonData).to.have.property('end_date');\r",
									"    pm.expect(jsonData).to.have.property('bid');\r",
									"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
									"    pm.expect(jsonData).to.have.property('status')\r",
									"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
									"    pm.expect(jsonData).to.have.property('istance_id')\r",
									"    pm.expect(jsonData).to.have.property('market_id')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ottieni l'orario attuale\r",
									"const currentDate = new Date();\r",
									"\r",
									"// Aggiungi 1 minuto all'orario attuale\r",
									"currentDate.setMinutes(currentDate.getMinutes() + 1);\r",
									"\r",
									"// Format la data nel formato \"dd/MM/yyyy HH:mm\"\r",
									"const formattedDate = currentDate.toLocaleString(\"it-IT\", {\r",
									"    day: \"2-digit\",\r",
									"    month: \"2-digit\",\r",
									"    year: \"numeric\",\r",
									"    hour: \"2-digit\",\r",
									"    minute: \"2-digit\"\r",
									"}).replace(\",\", \"\");\r",
									"\r",
									"// Imposta la variabile \"end_date\" con il nuovo valore\r",
									"pm.variables.set(\"end_date\", formattedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"end_date\": \"{{end_date}}\",\r\n  \"start_bid\": 100.0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/instance/1/auction"
					},
					"response": []
				},
				{
					"name": "market_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che la lista delle aste sia un array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"});\r",
									"\r",
									"pm.test(\"Each auction should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(auction => {\r",
									"        pm.expect(auction).to.have.property('istance_id');\r",
									"        pm.expect(auction).to.have.property('start_date');\r",
									"        pm.expect(auction).to.have.property('end_date');\r",
									"        pm.expect(auction).to.have.property('bid');\r",
									"        pm.expect(auction).to.have.property('buyer_user_id')\r",
									"        pm.expect(auction).to.have.property('status')\r",
									"        pm.expect(auction).to.have.property('seller_user_id')\r",
									"        pm.expect(auction).to.have.property('istance_id')\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/market_list"
					},
					"response": []
				},
				{
					"name": "bid2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che l'importo offerto sia corretto\", function () {\r",
									"    pm.expect(jsonData).to.have.property('istance_id');\r",
									"    pm.expect(jsonData).to.have.property('start_date');\r",
									"    pm.expect(jsonData).to.have.property('end_date');\r",
									"    pm.expect(jsonData).to.have.property('bid');\r",
									"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
									"    pm.expect(jsonData).to.have.property('status')\r",
									"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
									"    pm.expect(jsonData).to.have.property('istance_id')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bid_amount\": 200\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/market/1/bid"
					},
					"response": []
				},
				{
					"name": "get_amount2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(280);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "bid3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che l'importo offerto sia corretto\", function () {\r",
									"    pm.expect(jsonData).to.have.property('istance_id');\r",
									"    pm.expect(jsonData).to.have.property('start_date');\r",
									"    pm.expect(jsonData).to.have.property('end_date');\r",
									"    pm.expect(jsonData).to.have.property('bid');\r",
									"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
									"    pm.expect(jsonData).to.have.property('status')\r",
									"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
									"    pm.expect(jsonData).to.have.property('istance_id')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bid_amount\": 250\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5001/user/market/1/bid"
					},
					"response": []
				},
				{
					"name": "get_amount2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(480);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "user_collection1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User collection should be an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"});\r",
									"\r",
									"pm.test(\"Each user item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"    pm.expect(item).to.have.property('item_id');\r",
									"    pm.expect(item).to.have.property('instance_id');\r",
									"    pm.expect(item).to.have.property('image_path');\r",
									"    pm.expect(item).to.have.property('name');\r",
									"    pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The instance_id of the single item should be 1\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].instance_id).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function delay(ms) {\r",
									"    return new Promise(resolve => setTimeout(resolve, ms));\r",
									"}\r",
									"\r",
									"delay(75000).then(() => {\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/4/collection"
					},
					"response": []
				},
				{
					"name": "user_collection2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User collection should be an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"});\r",
									"\r",
									"pm.test(\"Each user item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"    pm.expect(item).to.have.property('item_id');\r",
									"    pm.expect(item).to.have.property('instance_id');\r",
									"    pm.expect(item).to.have.property('image_path');\r",
									"    pm.expect(item).to.have.property('name');\r",
									"    pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The instance_id of the single item should be 3\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].instance_id).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/2/collection"
					},
					"response": []
				},
				{
					"name": "user_collection3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User collection should be an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"});\r",
									"\r",
									"pm.test(\"Each user item should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"    pm.expect(item).to.have.property('item_id');\r",
									"    pm.expect(item).to.have.property('instance_id');\r",
									"    pm.expect(item).to.have.property('image_path');\r",
									"    pm.expect(item).to.have.property('name');\r",
									"    pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"The instance_id of the single item should be 1\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].instance_id).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/3/collection"
					},
					"response": []
				},
				{
					"name": "get_amount1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(760);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "get_amount2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(480);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "get_amount3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica che il saldo esista\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"amount\");\r",
									"    pm.expect(jsonData.amount).to.eql(250);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/amount"
					},
					"response": []
				},
				{
					"name": "transaction_history1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che la lista delle transazioni sia un array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Each transaction should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(transaction => {\r",
									"        pm.expect(transaction).to.have.property('istance_id');\r",
									"        pm.expect(transaction).to.have.property('start_date');\r",
									"        pm.expect(transaction).to.have.property('end_date');\r",
									"        pm.expect(transaction).to.have.property('bid');\r",
									"        pm.expect(transaction).to.have.property('buyer_user_id')\r",
									"        pm.expect(transaction).to.have.property('status')\r",
									"        pm.expect(transaction).to.have.property('seller_user_id')\r",
									"        pm.expect(transaction).to.have.property('istance_id')\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token1}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/transactions_history"
					},
					"response": []
				},
				{
					"name": "transaction_history2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che la lista delle transazioni sia un array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(0); \r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token2}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/transactions_history"
					},
					"response": []
				},
				{
					"name": "transaction_history3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Verifica che la lista delle transazioni sia un array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.eql(1); \r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Each transaction should have required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(transaction => {\r",
									"        pm.expect(transaction).to.have.property('istance_id');\r",
									"        pm.expect(transaction).to.have.property('start_date');\r",
									"        pm.expect(transaction).to.have.property('end_date');\r",
									"        pm.expect(transaction).to.have.property('bid');\r",
									"        pm.expect(transaction).to.have.property('buyer_user_id')\r",
									"        pm.expect(transaction).to.have.property('status')\r",
									"        pm.expect(transaction).to.have.property('seller_user_id')\r",
									"        pm.expect(transaction).to.have.property('istance_id')\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "{{jwt_token3}}",
								"type": "text"
							}
						],
						"url": "http://localhost:5001/user/transactions_history"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt_token1",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwt_token2",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwt_token3",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwt_token_admin",
			"value": ""
		}
	]
}