{
	"info": {
		"_postman_id": "1d5a6e25-f7f5-4f4b-a90d-f1c9d1667a89",
		"name": "Market_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39564474"
	},
	"item": [
		{
			"name": "auction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Auction - Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Auction - Check that the auction has been successfully created\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('istance_id');\r",
							"    pm.expect(jsonData).to.have.property('start_date');\r",
							"    pm.expect(jsonData).to.have.property('end_date');\r",
							"    pm.expect(jsonData).to.have.property('bid');\r",
							"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
							"    pm.expect(jsonData).to.have.property('status')\r",
							"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
							"    pm.expect(jsonData).to.have.property('istance_id')\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date();\r",
							"\r",
							"// Aggiungi 1 minuto alla data corrente\r",
							"currentDate.setMinutes(currentDate.getMinutes() + 2);\r",
							"console.log(currentDate);\r",
							"// Imposta il fuso orario per Roma (Europe/Rome) utilizzando toLocaleString\r",
							"const options = {\r",
							"  timeZone: 'Europe/Rome',\r",
							"  year: 'numeric',\r",
							"  month: '2-digit',\r",
							"  day: '2-digit',\r",
							"  hour: '2-digit',\r",
							"  minute: '2-digit'\r",
							"};\r",
							"\r",
							"const formattedDate = currentDate.toLocaleString('it-IT', options).replace(',', '');\r",
							"// Imposta la variabile \"end_date\" con la data formattata\r",
							"pm.collectionVariables.set(\"end_date\", formattedDate);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"end_date\": \"{{end_date}}\",\r\n  \"start_bid\": 100.0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost:5004/user/1/instance/1/auction"
			},
			"response": []
		},
		{
			"name": "auction already open",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Auction - Status code is 400 \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Auction - Auction already open\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error','bad_request');\r",
							"    pm.expect(jsonData).to.have.property('error_description','Auction already open');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date();\r",
							"\r",
							"// Aggiungi 1 minuto alla data corrente\r",
							"currentDate.setMinutes(currentDate.getMinutes() + 1);\r",
							"console.log(currentDate);\r",
							"// Imposta il fuso orario per Roma (Europe/Rome) utilizzando toLocaleString\r",
							"const options = {\r",
							"  timeZone: 'Europe/Rome',\r",
							"  year: 'numeric',\r",
							"  month: '2-digit',\r",
							"  day: '2-digit',\r",
							"  hour: '2-digit',\r",
							"  minute: '2-digit'\r",
							"};\r",
							"\r",
							"const formattedDate = currentDate.toLocaleString('it-IT', options).replace(',', '');\r",
							"// Imposta la variabile \"end_date\" con la data formattata\r",
							"pm.collectionVariables.set(\"end_date\", formattedDate);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"end_date\": \"{{end_date}}\",\r\n  \"start_bid\": 100.0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost:5004/user/1/instance/1/auction"
			},
			"response": []
		},
		{
			"name": "auction missing requirements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Auction - Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Auction - Missing requirements\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"     pm.expect(jsonData).to.have.property('error','bad_request');\r",
							"    pm.expect(jsonData).to.have.property('error_description','end_date and start_bid are mandatory');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentDate = new Date();\r",
							"\r",
							"// Aggiungi 1 minuto alla data corrente\r",
							"currentDate.setMinutes(currentDate.getMinutes() + 1);\r",
							"console.log(currentDate);\r",
							"// Imposta il fuso orario per Roma (Europe/Rome) utilizzando toLocaleString\r",
							"const options = {\r",
							"  timeZone: 'Europe/Rome',\r",
							"  year: 'numeric',\r",
							"  month: '2-digit',\r",
							"  day: '2-digit',\r",
							"  hour: '2-digit',\r",
							"  minute: '2-digit'\r",
							"};\r",
							"\r",
							"const formattedDate = currentDate.toLocaleString('it-IT', options).replace(',', '');\r",
							"// Imposta la variabile \"end_date\" con la data formattata\r",
							"pm.collectionVariables.set(\"end_date\", formattedDate);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"end_date\": \"{{end_date}}\" \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost:5004/user/1/instance/1/auction"
			},
			"response": []
		},
		{
			"name": "market_list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Market List - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Market List - Check that the list of auctions is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Market List - Each auction should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(auction => {\r",
							"        pm.expect(auction).to.have.property('istance_id');\r",
							"        pm.expect(auction).to.have.property('start_date');\r",
							"        pm.expect(auction).to.have.property('end_date');\r",
							"        pm.expect(auction).to.have.property('bid');\r",
							"        pm.expect(auction).to.have.property('buyer_user_id')\r",
							"        pm.expect(auction).to.have.property('status')\r",
							"        pm.expect(auction).to.have.property('seller_user_id')\r",
							"        pm.expect(auction).to.have.property('istance_id')\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://localhost:5004/user/1/market_list"
			},
			"response": []
		},
		{
			"name": "bid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bid - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Bid - Bid set correctly\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('istance_id');\r",
							"    pm.expect(jsonData).to.have.property('start_date');\r",
							"    pm.expect(jsonData).to.have.property('end_date');\r",
							"    pm.expect(jsonData).to.have.property('bid');\r",
							"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
							"    pm.expect(jsonData).to.have.property('status')\r",
							"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
							"    pm.expect(jsonData).to.have.property('istance_id')\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_amount\": 300\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost:5004/user/2/market/1/bid"
			},
			"response": []
		},
		{
			"name": "bid owner bid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bid - Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Bid - Seller cannot bid on his auction\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error','forbidden');\r",
							"    pm.expect(jsonData).to.have.property('error_description','You cannot bid on your own auction');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_amount\": 300\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost:5004/user/1/market/1/bid"
			},
			"response": []
		},
		{
			"name": "bid missing requirements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bid - Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Bid - Bid is mandatory\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error','bad_request');\r",
							"    pm.expect(jsonData).to.have.property('error_description','bid is mandatory');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_amoun\": 300\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost:5004/user/2/market/1/bid"
			},
			"response": []
		},
		{
			"name": "transaction_history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Transaction history - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Transaction history - Check that the transaction list is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Transaction history - Each transaction should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(transaction => {\r",
							"        pm.expect(transaction).to.have.property('istance_id');\r",
							"        pm.expect(transaction).to.have.property('start_date');\r",
							"        pm.expect(transaction).to.have.property('end_date');\r",
							"        pm.expect(transaction).to.have.property('bid');\r",
							"        pm.expect(transaction).to.have.property('buyer_user_id')\r",
							"        pm.expect(transaction).to.have.property('status')\r",
							"        pm.expect(transaction).to.have.property('seller_user_id')\r",
							"        pm.expect(transaction).to.have.property('istance_id')\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://localhost:5004/user/1/transactions_history"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "end_date",
			"value": "",
			"type": "string"
		}
	]
}