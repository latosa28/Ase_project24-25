{
	"info": {
		"_postman_id": "5526b69e-751e-4155-8f80-b5571c9ba62d",
		"name": "Market_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39564474"
	},
	"item": [
		{
			"name": "auction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 201 Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verifica che l'asta sia stata creata con successo\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('istance_id');\r",
							"    pm.expect(jsonData).to.have.property('start_date');\r",
							"    pm.expect(jsonData).to.have.property('end_date');\r",
							"    pm.expect(jsonData).to.have.property('bid');\r",
							"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
							"    pm.expect(jsonData).to.have.property('status')\r",
							"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
							"    pm.expect(jsonData).to.have.property('istance_id')\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ottieni la data corrente\r",
							"const currentDate = new Date();\r",
							"\r",
							"// Aggiungi 1 minuto\r",
							"currentDate.setMinutes(currentDate.getMinutes() + 1);\r",
							"\r",
							"// Ottieni il giorno, mese, anno, ora e minuti\r",
							"const day = String(currentDate.getDate()).padStart(2, '0'); // Aggiungi uno zero se il giorno è un singolo numero\r",
							"const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // I mesi vanno da 0 a 11, quindi aggiungi 1\r",
							"const year = currentDate.getFullYear();\r",
							"const hour = String(currentDate.getHours()).padStart(2, '0'); // Aggiungi uno zero se l'ora è un singolo numero\r",
							"const minutes = String(currentDate.getMinutes()).padStart(2, '0'); // Aggiungi uno zero se i minuti sono un singolo numero\r",
							"\r",
							"// Format la data nel formato \"dd/MM/yyyy HH:mm\"\r",
							"const formattedDate = `${day}/${month}/${year} ${hour}:${minutes}`;\r",
							"\r",
							"// Imposta la variabile \"end_date\" con il nuovo valore\r",
							"pm.collectionVariables.set(\"end_date\", formattedDate);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"end_date\": \"{{end_date}}\",\r\n  \"start_bid\": 100.0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:5004/user/1/instance/1/auction"
			},
			"response": []
		},
		{
			"name": "auction already open",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 400 \", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Auction already open\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message','Auction already open');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ottieni la data corrente\r",
							"const currentDate = new Date();\r",
							"\r",
							"// Aggiungi 1 minuto\r",
							"currentDate.setMinutes(currentDate.getMinutes() + 1);\r",
							"\r",
							"// Ottieni il giorno, mese, anno, ora e minuti\r",
							"const day = String(currentDate.getDate()).padStart(2, '0'); // Aggiungi uno zero se il giorno è un singolo numero\r",
							"const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // I mesi vanno da 0 a 11, quindi aggiungi 1\r",
							"const year = currentDate.getFullYear();\r",
							"const hour = String(currentDate.getHours()).padStart(2, '0'); // Aggiungi uno zero se l'ora è un singolo numero\r",
							"const minutes = String(currentDate.getMinutes()).padStart(2, '0'); // Aggiungi uno zero se i minuti sono un singolo numero\r",
							"\r",
							"// Format la data nel formato \"dd/MM/yyyy HH:mm\"\r",
							"const formattedDate = `${day}/${month}/${year} ${hour}:${minutes}`;\r",
							"\r",
							"// Imposta la variabile \"end_date\" con il nuovo valore\r",
							"pm.collectionVariables.set(\"end_date\", formattedDate);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"end_date\": \"{{end_date}}\",\r\n  \"start_bid\": 100.0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:5004/user/1/instance/1/auction"
			},
			"response": []
		},
		{
			"name": "auction missing requirements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Missing requirements\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message','end_date and start_bid are mandatory');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ottieni l'orario attuale\r",
							"const currentDate = new Date();\r",
							"\r",
							"// Aggiungi 1 minuto all'orario attuale\r",
							"currentDate.setMinutes(currentDate.getMinutes() + 1);\r",
							"\r",
							"// Format la data nel formato \"dd/MM/yyyy HH:mm\"\r",
							"const formattedDate = currentDate.toLocaleString(\"it-IT\", {\r",
							"    day: \"2-digit\",\r",
							"    month: \"2-digit\",\r",
							"    year: \"numeric\",\r",
							"    hour: \"2-digit\",\r",
							"    minute: \"2-digit\"\r",
							"}).replace(\",\", \"\");\r",
							"\r",
							"// Imposta la variabile \"end_date\" con il nuovo valore\r",
							"pm.collectionVariables.set(\"end_date\", formattedDate);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"end_date\": \"{{end_date}}\" \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:5004/user/1/instance/1/auction"
			},
			"response": []
		},
		{
			"name": "market_list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verifica che la lista delle aste sia un array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each auction should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(auction => {\r",
							"        pm.expect(auction).to.have.property('istance_id');\r",
							"        pm.expect(auction).to.have.property('start_date');\r",
							"        pm.expect(auction).to.have.property('end_date');\r",
							"        pm.expect(auction).to.have.property('bid');\r",
							"        pm.expect(auction).to.have.property('buyer_user_id')\r",
							"        pm.expect(auction).to.have.property('status')\r",
							"        pm.expect(auction).to.have.property('seller_user_id')\r",
							"        pm.expect(auction).to.have.property('istance_id')\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5004/user/1/market_list"
			},
			"response": []
		},
		{
			"name": "bid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verifica che l'importo offerto sia corretto\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('istance_id');\r",
							"    pm.expect(jsonData).to.have.property('start_date');\r",
							"    pm.expect(jsonData).to.have.property('end_date');\r",
							"    pm.expect(jsonData).to.have.property('bid');\r",
							"    pm.expect(jsonData).to.have.property('buyer_user_id')\r",
							"    pm.expect(jsonData).to.have.property('status')\r",
							"    pm.expect(jsonData).to.have.property('seller_user_id')\r",
							"    pm.expect(jsonData).to.have.property('istance_id')\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_amount\": 300\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:5004/user/2/market/1/bid"
			},
			"response": []
		},
		{
			"name": "bid owner bid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Seller cannot bid on his auction\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message','You cannot bid on your own auction');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_amount\": 300\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:5004/user/1/market/1/bid"
			},
			"response": []
		},
		{
			"name": "bid missing requirements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Bid is mandatory\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message','bid is mandatory');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_amoun\": 300\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:5004/user/2/market/1/bid"
			},
			"response": []
		},
		{
			"name": "transaction_history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verifica che la risposta sia 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verifica che la lista delle transazioni sia un array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each transaction should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(transaction => {\r",
							"        pm.expect(transaction).to.have.property('istance_id');\r",
							"        pm.expect(transaction).to.have.property('start_date');\r",
							"        pm.expect(transaction).to.have.property('end_date');\r",
							"        pm.expect(transaction).to.have.property('bid');\r",
							"        pm.expect(transaction).to.have.property('buyer_user_id')\r",
							"        pm.expect(transaction).to.have.property('status')\r",
							"        pm.expect(transaction).to.have.property('seller_user_id')\r",
							"        pm.expect(transaction).to.have.property('istance_id')\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:5004/user/1/transactions_history"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "end_date",
			"value": "",
			"type": "string"
		}
	]
}